plugins {
    id 'java-library'
    id 'io.qameta.allure' version '2.12.0'
    id "io.freefair.lombok" version "6.0.0-m2"

}

def restAssuredVersion = "5.4.0",
    allureVersion = "2.21.0"

allure {
    report {
        version.set('2.21.0')
    }
    adapter { // отвечает за появление папочки build/allure-results
        aspectjWeaver.set(true) //обработка аннотации @Step
        frameworks {
            junit5 { //название фреймворка
                adapterVersion.set('2.21.0') //версия интеграции фреймворка и Allure
            }
        }
    }
}
repositories {
    mavenCentral()
}

dependencies {
    testImplementation(
            'com.codeborne:selenide:7.2.1',
            'io.qameta.allure:allure-selenide:2.29.1',
            "io.rest-assured:rest-assured:$restAssuredVersion",
            "io.rest-assured:json-schema-validator:$restAssuredVersion",
            "io.qameta.allure:allure-rest-assured:$allureVersion",
            "io.rest-assured:rest-assured:5.5.2",
            "org.junit.jupiter:junit-jupiter:5.10.2",
            'org.assertj:assertj-core:3.24.2',
            'org.slf4j:slf4j-simple:2.0.7',
            'org.apache.logging.log4j:log4j-core:2.20.0',
            'io.github.cdimascio:dotenv-java:3.0.0',
            'org.hamcrest:hamcrest-all:1.3',
            'org.aeonbits.owner:owner:1.0.12'


    )

}
test {
    useJUnitPlatform()
    systemProperties(System.getProperties())
}

dependencies {
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
}

tasks.withType(Test) {
    useJUnitPlatform()
    systemProperties(System.getProperties())//для прокидывания переменных внутрь кода из вне (jenkins)
    testLogging {
        lifecycle {
            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }
}
tasks.withType(Test) {
    systemProperty "file.encoding", "UTF-8"
    systemProperty "sun.jnu.encoding", "UTF-8"

    testLogging {
        events "passed", "skipped", "failed"
        showStandardStreams = true
        exceptionFormat = 'full'
    }
}

compileJava {
    options.encoding = 'UTF-8'
}
compileTestJava {
    options.encoding = 'UTF-8'
}